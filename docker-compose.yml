# Fix 1: Update your docker-compose.yml environment section

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: url-shortener-db
    environment:
      POSTGRES_DB: urlshortener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: url-shortener-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build: .
    container_name: url-shortener-app
    environment:
      DATABASE_URL: postgresql://postgres:root@postgres:5432/urlshortener
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: b8f4c3d9e7a2f6b1c4e8d3a9f7b2e6c1a5d8f4b7e3c9a6f2b5e1d4c7a3f9b6e2
      BASE_URL: http://localhost:5000
      FLASK_ENV: production
      PERFORMANCE_MODE: "true"
      PORT: "5000"  # Add explicit PORT variable
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    # Override the command to use gunicorn directly
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 run:app

volumes:
  postgres_data:
  redis_data: